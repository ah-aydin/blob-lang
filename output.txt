[INFO] Compiling and running example-scripts/cfg_test.blob...
[INFO] Scanning...
[INFO] Scanning comlpete!
[INFO] Parsing...
[INFO] Parsing complete!
[INFO] Analyzing semantics...
[INFO] Analysis complete!
Blocks for function 'foo'
0: Start - successor 1 - Some(VarTypeInfo { ident: "a", btype_wrapper: I64 })
1: Basic - successor 2 - Some(VarDecl(StmtVarDecl { ident: "c", btype_wrapper: Void, expr: I64(ExprI64 { value: 10, file_coords: (2, 11) }) }))
2: Condition - true successor 3 - false successor 4 - BinaryOp(ExprBinaryOp { left: Identifier(ExprIdenifier { ident: "c", file_coords: (8, 7) }), op: Eq, right: I64(ExprI64 { value: 10, file_coords: (8, 12) }), file_coords: (8, 9) })
3: Basic - successor 11 - Some(VarDecl(StmtVarDecl { ident: "d", btype_wrapper: Void, expr: BinaryOp(ExprBinaryOp { left: Identifier(ExprIdenifier { ident: "c", file_coords: (9, 13) }), op: Add, right: I64(ExprI64 { value: 10, file_coords: (9, 17) }), file_coords: (9, 15) }) }))
4: Basic - successor 5 - Some(VarDecl(StmtVarDecl { ident: "e", btype_wrapper: Void, expr: I64(ExprI64 { value: 10, file_coords: (12, 13) }) }))
5: Condition - true successor 6 - false successor 7 - Bool(ExprBool { value: true, file_coords: (13, 9) })
6: Basic - successor 10 - Some(Return(StmtReturn { expr: Some(I64(ExprI64 { value: 1, file_coords: (14, 14) })) }))
7: Condition - true successor 8 - false successor 9 - Bool(ExprBool { value: false, file_coords: (15, 16) })
8: Basic - successor 9 - Some(Return(StmtReturn { expr: Some(I64(ExprI64 { value: 2, file_coords: (16, 16) })) }))
9: Basic - successor 10 - None
10: Basic - successor 11 - Some(Return(StmtReturn { expr: Some(BinaryOp(ExprBinaryOp { left: BinaryOp(ExprBinaryOp { left: I64(ExprI64 { value: 1, file_coords: (18, 12) }), op: Add, right: I64(ExprI64 { value: 123, file_coords: (18, 16) }), file_coords: (18, 14) }), op: Add, right: Identifier(ExprIdenifier { ident: "e", file_coords: (18, 22) }), file_coords: (18, 20) })) }))
11: Basic - successor 0 - Some(Return(StmtReturn { expr: Some(BinaryOp(ExprBinaryOp { left: Identifier(ExprIdenifier { ident: "a", file_coords: (20, 10) }), op: Add, right: I64(ExprI64 { value: 10, file_coords: (20, 14) }), file_coords: (20, 12) })) }))

Blocks for function 'main'
0: Start - successor 1 - None
1: Basic - successor 0 - Some(Return(StmtReturn { expr: Some(I64(ExprI64 { value: 0, file_coords: (24, 10) })) }))

